from nouns_list import nouns_list
from transformers import pipeline
import numpy as np


def generate_prompts(input_str):
    '''Given a single word or phrase topic, generate a list of prompts containing the input'''
    """
    Generate a list of prompts containing the input
    """
    return [
        f"To elaborate on {input_str},",
        f"I first learned of {input_str} when",
        f"{input_str} has had the following impact on",
        f"Let me tell you a story about {input_str}. It all started",
        f"{input_str} has more to it than"
    ]

def generate_text(input_str):
    """
    Generate text given a prompt using GPT2.

    Args:
        input_str (str): The prompt for the text.
    """
    generator = pipeline('text-generation', model='gpt2')
    return generator(input_str)[0]['generated_text']

def check_on_topic(input, topic):
    '''Given an input (to be generated by a model), use Facebook-BART to check whether it is likely to be about the topic.
       Likelihood is considered by taking every noun in the topic and computing the probability of that topic. 
       A definitive conclusion is considered to be reached when the probability of the topic is more than 0.2 higher than the other candidates
       Return a descriptive string saying how accurate the text was.'''
    candidate_labels = [topic]
    candidate_labels.extend([x for x in nouns_list(input)]) # check all nouns in the response
    classifier = pipeline("zero-shot-classification", mode="facebook/bart-large-mnli")
    d = classifier(input, candidate_labels)
    highest = np.argmax(d['scores']) # index of highest probability
    highest_topic = d['labels'][highest]
    second_highest = np.argsort(d['scores'])[-2]
    second_highest_topic = d['labels'][second_highest]
    result = ""
    if d['scores'][highest] > d['scores'][second_highest] + 0.2:
        if highest_topic == topic:
            result = f"'{d['sequence']}' is probably about '{topic}', with probability {d['scores'][highest]} being at least 0.2 higher than all other possibilities"
        else:
            result = f"'{d['sequence']}' is probably not about '{topic}' but rather about '{highest_topic}', with probability {d['scores'][highest]} being at least 0.2 higher than all other possibilities"
    else:
        if highest_topic == topic:
            result = f"'{d['sequence']}' is most likely about '{topic}', with probability {d['scores'][highest]}, but it may also be about '{second_highest_topic}' with probability {d['scores'][second_highest]}"
        else:
            if second_highest_topic == topic:
                result = f"'{d['sequence']}' is most likely not about '{topic}', but rather about '{highest_topic}' with probability {d['scores'][highest]}. It is however also possible it is about '{second_highest_topic}' with probability {d['scores'][second_highest]}"
            else: 
                result = f"'{d['sequence']}' is most likely not about '{topic}', but rather about '{highest_topic}' with probability {d['scores'][highest]}. The second most likely possibility is '{second_highest_topic}' with probability {d['scores'][second_highest]}"
    return result
